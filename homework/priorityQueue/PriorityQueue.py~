class PriorityQueue:

    def __init__(self, optional = None): #initializes priority queue / heap
        self.info = []
        self.size = 0

        if not optional == None:
            for each in optional:
                self.insert(each)
                
    def __str__(self): #the to-string method
        return str(self.info)

    def insert(self, value): #inserts value into heap; sorts it so that parent >= child
        self.info.append(value)
        self.size = self.size + 1

        current = self.size - 1
        parent = (current - 1) / 2

        while(self.info[current] < self.info[parent] and parent >= 0):
            self.info[current], self.info[parent] = (self.info[parent], self.info[current])

            current = parent
            parent = (parent - 1) / 2

    def remove(self): #pops off the top element and returns it; if empty, returns None
        if self.size == 0:
            return None
        
        oldroot = self.info[0]

        self.info[0] = self.info[self.size - 1]
        del self.info[-1]
        self.size = self.size - 1

        current = 0
        leftchild = 2 * current + 1
        rightchild = 2 * current + 2
        
        while(leftchild < self.size and rightchild < self.size and
              (self.info[current] > self.info[leftchild] or self.info[current] > self.info[rightchild])):

            if self.info[leftchild] < self.info[rightchild]:
                self.info[current], self.info[leftchild] = (self.info[leftchild], self.info[current])
                current = leftchild
                leftchild = current * 2 + 1
                rightchild = current * 2 + 2
            else:
                self.info[current], self.info[rightchild] = (self.info[rightchild], self.info[current])
                current = rightchild
                leftchild = current * 2 + 1
                rightchild = current * 2 + 2
        return oldroot
                
    def peek(self): #returns but does not remove top element; if empty, returns None
        if self.size > 0:
            return self.info[0]
        return None

    def size(self): #returns size of the current priority queue / heap
        return self.size




#Testing
a = PriorityQueue([1, 3, 3, 5])

#a.insert(100)
#.insert(43)
#a.insert(9)

a.remove()

print('-----')
print(a)
print('Size: ' + str(a.size))
print('-----')
